#include <Mod/CppUserModBase.hpp>
#include <UE4SSProgram.hpp>
#include <UObject.hpp>
#include <UObjectGlobals.hpp>
#include <UFunction.hpp>
#include <SDK/Classes/PalUtility.h>
#include <SDK/Classes/PalCharacterParameterComponent.h>
#include <SDK/Classes/PalCharacterStatusOperation.h>
#include <SDK/Classes/PalNetworkCharacterStatusOperationComponent.h>
#include <SDK/Classes/PalMasterDataTableAccess_CharacterUpgradeData.h>
#include <SDK/Structs/Pal_structs.h>

using namespace RC;
using namespace RC::Unreal;
using namespace Palworld;

class NoExploits : public RC::CppUserModBase
{
public:
    NoExploits() : CppUserModBase()
    {
        ModName = STR("NoExploits");
        ModVersion = STR("0.1.0");
        ModDescription = STR("Don't be a cheater.");
        ModAuthors = STR("Okaetsu");
    }

    ~NoExploits() override
    {
    }

    auto on_unreal_init() -> void override
    {
        wprintf(STR("%s v%s by %s\n"), ModName.c_str(), ModVersion.c_str(), ModAuthors.c_str());

        m_MaxRank = UPalMasterDataTableAccess_CharacterUpgradeData::GetMaxRank();

        Output::send<LogLevel::Verbose>(STR("Max Upgrade Rank set to {}\n"), m_MaxRank);

        auto RequestOtomoStatusPointAdd_ToServer = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            STR("/Script/Pal.PalNetworkCharacterStatusOperationComponent:RequestOtomoStatusPointAdd_ToServer"));
        if (RequestOtomoStatusPointAdd_ToServer)
        {
            RequestOtomoStatusPointAdd_ToServer->RegisterPreHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                struct LocalParams {
                    FPalInstanceID IndividualId;
                    TArray<FPalStatusAndRank> ToStatusRank;
                };

                auto Params = std::bit_cast<LocalParams*>(context.TheStack.Locals());

                for (auto& Item : Params->ToStatusRank)
                {
                    if (Item.Rank > m_MaxRank)
                    {
                        Item.Rank = m_MaxRank;
                    }
                }
            });
        }

        auto OnInitializedCharacter = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            STR("/Script/Pal.PalCharacterParameterComponent:OnInitializedCharacter"));
        if (OnInitializedCharacter)
        {
            OnInitializedCharacter->RegisterPostHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                struct LocalParams {
                    RC::Unreal::AActor* Owner;
                };

                auto ParameterComponent = static_cast<UPalCharacterParameterComponent*>(context.Context);
                auto IndividualParameter = ParameterComponent->GetIndividualParameter();
                auto SaveParameter = IndividualParameter->GetSaveParameter();

                if (SaveParameter->Rank_Attack > m_MaxRank)
                {
                    SaveParameter->Rank_Attack = m_MaxRank;
                }
                
                if (SaveParameter->Rank_HP > m_MaxRank)
                {
                    SaveParameter->Rank_HP = m_MaxRank;
                    ParameterComponent->SetHP(ParameterComponent->GetMaxHP());
                }

                if (SaveParameter->Rank_Defence > m_MaxRank)
                {
                    SaveParameter->Rank_Defence = m_MaxRank;
                }

                if (SaveParameter->Rank_CraftSpeed > m_MaxRank)
                {
                    SaveParameter->Rank_CraftSpeed = m_MaxRank;
                }
            });
        }
    }
private:
    int m_MaxRank = 10;
};

#define NOEXPLOITS_API __declspec(dllexport)
extern "C"
{
    NOEXPLOITS_API RC::CppUserModBase* start_mod()
    {
        return new NoExploits();
    }

    NOEXPLOITS_API void uninstall_mod(RC::CppUserModBase* mod)
    {
        delete mod;
    }
}
