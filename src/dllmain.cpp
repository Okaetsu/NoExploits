#include <Mod/CppUserModBase.hpp>
#include <UE4SSProgram.hpp>
#include <UObject.hpp>
#include <UObjectGlobals.hpp>
#include <UFunction.hpp>
#include <PalNetArchiveReader.h>
#include <SDK/Classes/PalUtility.h>
#include <SDK/Classes/PalCharacterParameterComponent.h>
#include <SDK/Classes/PalCharacterStatusOperation.h>
#include <SDK/Classes/PalNetworkCharacterStatusOperationComponent.h>
#include <SDK/Classes/PalMasterDataTableAccess_CharacterUpgradeData.h>
#include <SDK/Classes/PalNetworkTransmitter.h>
#include <SDK/Classes/PalPlayerController.h>
#include <SDK/Classes/PalTechnologyData.h>
#include <SDK/Structs/Pal_structs.h>

using namespace RC;
using namespace RC::Unreal;
using namespace Palworld;

namespace Palworld {
    FName NAME_ChangeRecipe_ServerInternal = FName(TEXT("ChangeRecipe_ServerInternal"), FNAME_Add);
}

class NoExploits : public RC::CppUserModBase
{
public:
    NoExploits() : CppUserModBase()
    {
        ModName = TEXT("NoExploits");
        ModVersion = TEXT("0.2.0");
        ModDescription = TEXT("Don't be a cheater.");
        ModAuthors = TEXT("Okaetsu");
    }

    ~NoExploits() override
    {
    }

    auto on_unreal_init() -> void override
    {
        wprintf(TEXT("%s v%s by %s\n"), ModName.c_str(), ModVersion.c_str(), ModAuthors.c_str());

        m_MaxRank = UPalMasterDataTableAccess_CharacterUpgradeData::GetMaxRank();

        Output::send<LogLevel::Verbose>(TEXT("Max Upgrade Rank set to {}\n"), m_MaxRank);

        auto RequestOtomoStatusPointAdd_ToServer = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            TEXT("/Script/Pal.PalNetworkCharacterStatusOperationComponent:RequestOtomoStatusPointAdd_ToServer"));
        if (RequestOtomoStatusPointAdd_ToServer)
        {
            RequestOtomoStatusPointAdd_ToServer->RegisterPreHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                struct LocalParams {
                    FPalInstanceID IndividualId;
                    TArray<FPalStatusAndRank> ToStatusRank;
                };

                auto Params = std::bit_cast<LocalParams*>(context.TheStack.Locals());

                for (auto& Item : Params->ToStatusRank)
                {
                    if (Item.Rank > m_MaxRank)
                    {
                        Item.Rank = m_MaxRank;
                    }
                }
            });
        }

        auto OnInitializedCharacter = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            TEXT("/Script/Pal.PalCharacterParameterComponent:OnInitializedCharacter"));
        if (OnInitializedCharacter)
        {
            OnInitializedCharacter->RegisterPostHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                auto ParameterComponent = static_cast<UPalCharacterParameterComponent*>(context.Context);
                auto IndividualParameter = ParameterComponent->GetIndividualParameter();
                auto SaveParameter = IndividualParameter->GetSaveParameter();

                if (SaveParameter->Rank_Attack > m_MaxRank)
                {
                    SaveParameter->Rank_Attack = m_MaxRank;
                }

                if (SaveParameter->Rank_HP > m_MaxRank)
                {
                    SaveParameter->Rank_HP = m_MaxRank;
                    ParameterComponent->SetHP(ParameterComponent->GetMaxHP());
                }

                if (SaveParameter->Rank_Defence > m_MaxRank)
                {
                    SaveParameter->Rank_Defence = m_MaxRank;
                }

                if (SaveParameter->Rank_CraftSpeed > m_MaxRank)
                {
                    SaveParameter->Rank_CraftSpeed = m_MaxRank;
                }
            });
        }

        auto RequestConcreteModel_Server = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            TEXT("/Script/Pal.PalNetworkMapObjectComponent:RequestConcreteModel_Server_FPalNetArchive"));
        if (RequestConcreteModel_Server)
        {
            RequestConcreteModel_Server->RegisterPreHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                struct LocalParams {
                    Palworld::FGuid ConcreteModelInstanceId;
                    RC::Unreal::FName FunctionName;
                    Palworld::FPalNetArchive Value;
                };
                auto& Params = context.GetParams<LocalParams>();

                auto CancelFunction = [&](const RC::StringType& Reason) {
                    Output::send<LogLevel::Error>(TEXT("Cancelling {}, {}\n"), Params.FunctionName.ToString(), Reason);
                    Params.FunctionName = RC::Unreal::NAME_None;
                };

                try
                {
                    if (Params.FunctionName == Palworld::NAME_ChangeRecipe_ServerInternal)
                    {
                        std::wstring Message{};
                        auto Reader = PalNetArchiveReader(Params.Value);
                        Reader.Read(Message);

                        auto RecipeItem_Name = FName(Message, FNAME_Find);
                        auto Transmitter = static_cast<APalNetworkTransmitter*>(context.Context->GetOuterPrivate());
                        if (Transmitter)
                        {
                            auto PlayerController = Transmitter->GetOwner();
                            if (PlayerController)
                            {
                                auto UId = PlayerController->GetPlayerUId();
                                auto TechnologyData = UPalUtility::GetTechnologyDataByPlayerUID(context.Context, UId);
                                if (TechnologyData)
                                {
                                    if (!TechnologyData->IsUnlockCraftRecipe(RecipeItem_Name))
                                    {
                                        CancelFunction(std::format(TEXT("Player doesn't have the recipe for '{}' unlocked!"), RecipeItem_Name.ToString()));
                                    }
                                }
                            }
                        }
                    }
                }
                catch (const std::exception& e)
                {
                    CancelFunction(std::format(STR("{}"), RC::to_generic_string(e.what())));
                }
            });
        }

        auto RequestBuild_ToServer = UObjectGlobals::StaticFindObject<UFunction*>(nullptr, nullptr,
            TEXT("/Script/Pal.PalBuilderComponent:RequestBuild_ToServer"));
        if (RequestBuild_ToServer)
        {
            RequestBuild_ToServer->RegisterPreHook([&](Unreal::UnrealScriptFunctionCallableContext context, void* custom_data) {
                struct LocalParams {
                    RC::Unreal::FName BuildObjectId;
                    RC::Unreal::FVector Location;
                    RC::Unreal::FRotator Rotation;
                    RC::Unreal::TArray<FPalNetArchive> ExtraParameterArchives;
                    FPalBuildRequestDebugParameter DebugParameter;
                };

                auto& Params = context.GetParams<LocalParams>();

                auto Player = static_cast<AActor*>(context.Context->GetOuterPrivate());
                if (Player)
                {
                    auto UId = UPalUtility::GetPlayerUIDByActor(Player);
                    if (UId.is_valid())
                    {
                        auto TechnologyData = UPalUtility::GetTechnologyDataByPlayerUID(Player, UId);
                        if (!TechnologyData->IsUnlockBuildObject(Params.BuildObjectId))
                        {
                            Params.BuildObjectId = RC::Unreal::NAME_None;
                        }
                    }
                }
            });
        }
    }
private:
    int m_MaxRank = 10;
};

#define NOEXPLOITS_API __declspec(dllexport)
extern "C"
{
    NOEXPLOITS_API RC::CppUserModBase* start_mod()
    {
        return new NoExploits();
    }

    NOEXPLOITS_API void uninstall_mod(RC::CppUserModBase* mod)
    {
        delete mod;
    }
}
